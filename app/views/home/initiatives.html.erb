<div class="cd-intro-block">
    <div class="wrapper">
      <div id="googlemaps"></div>
      <h1>Iniciativas ambientales</h1>
      <h4>Es importante que participemos activamente evaluando la gesti√≥n de nuestros municipios para incidir positivamente en su trabajo. Selecciona tu comuna para revisar sus proyectos.</h4>
      <div id=\"initiatives_form\" class="pull-left">
        <%= form_tag initiatives_path, :method => :get, remote: true do |f| %>
          <%= select_tag :area, options_from_collection_for_select(Area.joins(:posts).where('posts.area_id is not null').distinct, "id", "name", ""), include_blank:  t('.select_area'), class: "chosen-select", id: "initiatives_area_select", onchange: "$(this).parent('form').submit();"%>
        <% end %>
      </div>
      <a href="#0" class='btn btn-primary' data-action="show-projects">Ver iniciativas</a>
      <div id="initiatives_list"></div>
    </div>
  </div> <!-- .cd-intro-block -->

  <div class="cd-projects-wrapper">
    <ul class="cd-slider">
      <% unless @initiatives.nil? %>
        <% @initiatives.each_with_index do |i, index|%>
        <li class="<%= (index===0) ? 'current' : '' %>">
          <a href="" data-id="<%= i.id %>" id="post_thumb_<%=i.id %>">
            <img src="/assets/img.png" alt="project image">
            <div class="project-info">
              <h2><%= i.title %></h2>
              <p>Lorem ipsum dolor sit amet.</p>
            </div>
          </a>
        </li>
        <% end %>
      <% end %>
    </ul>

    <ul class="cd-slider-navigation cd-img-replace">
      <li><a href="#0" class="prev inactive">Prev</a></li>
      <li><a href="#0" class="next">Next</a></li>
    </ul> <!-- .cd-slider-navigation -->
  </div> <!-- .cd-projects-wrapper -->


  <div class="cd-project-content" data-id="project-0">
    <div>
      <a href="" class="close cd-img-replace">Close</a>
      <h2></h2>
      <p></p>
    </div>
  </div>



<script type="text/javascript">
  function squeezebox_setup(){
    var intro = $('.cd-intro-block'),
    projectsContainer = $('.cd-projects-wrapper'),
    projectsSlider = projectsContainer.children('.cd-slider'),
    singleProjectContent = $('.cd-project-content'),
    sliderNav = $('.cd-slider-navigation');

    var resizing = false;

    //if on desktop - set a width for the projectsSlider element
    setSliderContainer();
    $(window).on('resize', function(){
      //on resize - update projectsSlider width and translate value
      if( !resizing ) {
        (!window.requestAnimationFrame) ? setSliderContainer() : window.requestAnimationFrame(setSliderContainer);
        resizing = true;
      }
    });

    //show the projects slider if user clicks the show-projects button
    intro.on('click', 'a[data-action="show-projects"]', function(event) {
      event.preventDefault();
      intro.addClass('projects-visible');
      projectsContainer.addClass('projects-visible');
      //animate single project - entrance animation
      setTimeout(function(){
        showProjectPreview(projectsSlider.children('li').eq(0));
      }, 200);
    });

    intro.on('click', function(event) {
      //projects slider is visible - hide slider and show the intro panel
      if( intro.hasClass('projects-visible') && !$(event.target).is('a[data-action="show-projects"]') ) {
        intro.removeClass('projects-visible');
        projectsContainer.removeClass('projects-visible');
      }
    });

    //select a single project - open project-content panel
    projectsContainer.on('click', '.cd-slider a', function(event) {
      var mq = checkMQ();
      event.preventDefault();
      if( $(this).parent('li').next('li').is('.current') && (mq == 'desktop') ) {
        prevSides(projectsSlider);
      } else if ( $(this).parent('li').prev('li').prev('li').prev('li').is('.current')  && (mq == 'desktop') ) {
        nextSides(projectsSlider);
      } else {
        var clicked_element = $(this).attr("data-id");
        var id = clicked_element.replace('project-', '');

        // var dataid = $(this).data('id');
        // var project_id = $("[data-id=project-"+dataid+"]");
        var project= $('.cd-project-content');
        $.ajax({
          url: "/posts/" + id,
          dataType: "script"
        })
        .success(function( msg ) {
          project.addClass('is-visible');
          $(document).trigger("rate:click");
        })
        .error(function( msg ) {
          alert( "Data Error");
        });
      }
    });

    //close single project content
    singleProjectContent.on('click', '.close', function(event){
      event.preventDefault();
      singleProjectContent.removeClass('is-visible');
    });

    //go to next/pre slide - clicking on the next/prev arrow
    sliderNav.on('click', '.next', function(){
      nextSides(projectsSlider);
    });
    sliderNav.on('click', '.prev', function(){
      prevSides(projectsSlider);
    });

    //go to next/pre slide - keyboard navigation
    $(document).keyup(function(event){
      var mq = checkMQ();
      if(event.which=='37' &&  intro.hasClass('projects-visible') && !(sliderNav.find('.prev').hasClass('inactive')) && (mq == 'desktop') ) {
        prevSides(projectsSlider);
      } else if( event.which=='39' &&  intro.hasClass('projects-visible') && !(sliderNav.find('.next').hasClass('inactive')) && (mq == 'desktop') ) {
        nextSides(projectsSlider);
      } else if(event.which=='27' && singleProjectContent.hasClass('is-visible')) {
        singleProjectContent.removeClass('is-visible');
      }
    });

    projectsSlider.on('swipeleft', function(){
      var mq = checkMQ();
      if( !(sliderNav.find('.next').hasClass('inactive')) && (mq == 'desktop') ) nextSides(projectsSlider);
    });

    projectsSlider.on('swiperight', function(){
      var mq = checkMQ();
      if ( !(sliderNav.find('.prev').hasClass('inactive')) && (mq == 'desktop') ) prevSides(projectsSlider);
    });

    function showProjectPreview(project) {
      if(project.length > 0 ) {
        setTimeout(function(){
          project.addClass('slides-in');
          showProjectPreview(project.next());
        }, 50);
      }
    }

    function checkMQ() {
      //check if mobile or desktop device
      return window.getComputedStyle(document.querySelector('.cd-projects-wrapper'), '::before').getPropertyValue('content').replace(/'/g, "").replace(/"/g, "");
    }

    function setSliderContainer() {
      var mq = checkMQ();
      if(mq == 'desktop') {
        var slides = projectsSlider.children('li'),
        slideWidth = slides.eq(0).width();
        var marginLeft = 0;
        if (typeof projectsSlider.children('li').eq(1).css('margin-left') !== 'undefined') {
          marginLeft = Number(projectsSlider.children('li').eq(1).css('margin-left').replace('px', ''))
        }
        var sliderWidth = ( slideWidth + marginLeft )*( slides.length + 1 ) + 'px',
        slideCurrentIndex = projectsSlider.children('li.current').index();
        projectsSlider.css('width', sliderWidth);
        ( slideCurrentIndex != 0 ) && setTranslateValue(projectsSlider, (  slideCurrentIndex * (slideWidth + marginLeft) + 'px'));
      } else {
        projectsSlider.css('width', '');
        setTranslateValue(projectsSlider, 0);
      }
      resizing = false;
    }

    function nextSides(slider) {
      var actual = slider.children('.current'),
      index = actual.index(),
      following = actual.nextAll('li').length,
      width = actual.width(),
      marginLeft = Number(slider.children('li').eq(1).css('margin-left').replace('px', ''));

      index = (following > 4 ) ? index + 3 : index + following - 2;
      //calculate the translate value of the slider container
      translate = index * (width + marginLeft) + 'px';

      slider.addClass('next');
      setTranslateValue(slider, translate);
      slider.one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function(){
        updateSlider('next', actual, slider, following);
      });

      if( $('.no-csstransitions').length > 0 ) updateSlider('next', actual, slider, following);
    }

    function prevSides(slider) {
      var actual = slider.children('.previous'),
      index = actual.index(),
      width = actual.width(),
      marginLeft = Number(slider.children('li').eq(1).css('margin-left').replace('px', ''));

      translate = index * (width + marginLeft) + 'px';

      slider.addClass('prev');
      setTranslateValue(slider, translate);
      slider.one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function(){
        updateSlider('prev', actual, slider);
      });

      if( $('.no-csstransitions').length > 0 ) updateSlider('prev', actual, slider);
    }

    function updateSlider(direction, actual, slider, numerFollowing) {
      if( direction == 'next' ) {

        slider.removeClass('next').find('.previous').removeClass('previous');
        actual.removeClass('current');
        if( numerFollowing > 4 ) {
          actual.addClass('previous').next('li').next('li').next('li').addClass('current');
        } else if ( numerFollowing == 4 ) {
          actual.next('li').next('li').addClass('current').prev('li').prev('li').addClass('previous');
        } else {
          actual.next('li').addClass('current').end().addClass('previous');
        }
      } else {

        slider.removeClass('prev').find('.current').removeClass('current');
        actual.removeClass('previous').addClass('current');
        if(actual.prevAll('li').length > 2 ) {
          actual.prev('li').prev('li').prev('li').addClass('previous');
        } else {
          ( !slider.children('li').eq(0).hasClass('current') ) && slider.children('li').eq(0).addClass('previous');
        }
      }

      updateNavigation();
    }

    function updateNavigation() {
      //update visibility of next/prev buttons according to the visible slides
      var current = projectsContainer.find('li.current');
      (current.is(':first-child')) ? sliderNav.find('.prev').addClass('inactive') : sliderNav.find('.prev').removeClass('inactive');
      (current.nextAll('li').length < 3 ) ? sliderNav.find('.next').addClass('inactive') : sliderNav.find('.next').removeClass('inactive');
    }

    function setTranslateValue(item, translate) {
      item.css({
        '-moz-transform': 'translateX(-' + translate + ')',
        '-webkit-transform': 'translateX(-' + translate + ')',
        '-ms-transform': 'translateX(-' + translate + ')',
        '-o-transform': 'translateX(-' + translate + ')',
        'transform': 'translateX(-' + translate + ')',
      });
    }


  }
  jQuery(document).ready(function(){
    squeezebox_setup();
  });
  $( document ).ajaxComplete(function() {
    squeezebox_setup();
  });

</script>

<script src="http://maps.googleapis.com/maps/api/js?sensor=false&key=<%= ENV['GOOGLE_MAPS_API_KEY'] %>"></script>

<script type="text/javascript">
  // The latitude and longitude of your business / place
  var position = [-33.446165, -70.665767];
  function showGoogleMaps() {
      var latLng = new google.maps.LatLng(position[0], position[1]);
      var mapOptions = {
          zoom: 10, // initialize zoom level - the max value is 21
          streetViewControl: false, // hide the yellow Street View pegman
          scaleControl: false, // allow users to zoom the Google Map
          mapTypeId: google.maps.MapTypeId.ROADMAP,
          center: latLng
      };
      map = new google.maps.Map(document.getElementById('googlemaps'),
          mapOptions);
      <% vitacura = Area.find_by_name 'Vitacura' %>
      <% geojson_polygon = RGeo::GeoJSON.encode vitacura.geom%>
      <% post_areas = Post.select(:area_id).distinct %>
      <% post_areas.each do |post_area| %>
        <% area = Area.find(post_area.area_id) %>
          <% unless area.geom.nil? %>
            var contentString = '<div id="content">'+' <%= area.name %> '+ '</div>';
            var infowindow_<%= area.id %> = new google.maps.InfoWindow({
              content: contentString
            });
            var latlong = {lat: -25.363, lng: 131.044};
            var marker_<%= area.id %> = new google.maps.Marker({
              position: <%= raw area.centroid_coordinates %>,
              map: map,
              title: '<%= area.name %>',
              draggable: false,
              animation: google.maps.Animation.DROP
            });
            marker_<%= area.id %>.addListener('click', function() {
              infowindow_<%= area.id %>.open(map, marker_<%= area.id %>);
            });
            var geojson_polygon = JSON.parse('<%= raw area.geojson %>')
            map.data.addGeoJson(geojson_polygon);
          <% end %>
      <% end %>
  }
  google.maps.event.addDomListener(window, 'load', showGoogleMaps);
</script>
